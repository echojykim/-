찾기(SELECT - DQL) 
	 * 1. PreparedStatement객체 생성 (sql전달) & 값대입
	 * 2. 쿼리실행 executeQuery - ResultSet 반환
	 * 3. ResultSet처리 - dto객체 변환
	 * 4. ResulstSet, PreparedStatement객체 반환 
> mybatis : 
무조건 하나의 객체(Map이 되었건 dto가 되었건) 전부 담아야 함.
mapper.xml에 resultType을 명시해야함

수정, 추가, 삭제 (update, insert, delete - DML)
	 * DML요청 - dao
	 * 1. PreparedStatement객체 생성 (sql전달) & 값대입
	 * 2. 쿼리실행 executeUpdate - int 반환
	 * 3. PreparedStatement객체 반환 
>mybatis:
mapper.xml에 parameterType을 씀. 
- OGNL : Object Graph Navigation Language방식으로 한다.
    - 변수 입력은 #{get땐 이름} 으로 작성한다.

dto - resultType / resultMap
map - resultType / resultMap 

selectOne - 단건조회
1. 열의 종류에 상관없이 1개만 반환한다 이걸 사용 
2. XML 코드에서 resultType 속성을 꼭 명시해야함. (int인지 뭔지 등등) 

resultMap 
1. handleResultSet을 하듯 이름과 속성을 매칭시키는 mapper라고 생각하면 됨 
varchar2. char -> String
number -> int, double
date -> j.u.Date 

selectList - 여러건 조회
1. 리스트 형식으로 감싸서 반환하는 걸 제외하곤 selectOne가 유사.
2. mapper.xml엔 그대로 쓰지만 오버라이드 한 doGet을 List로 반환함 

resultType  
- ibatis 에서 resultClass → mybatis 에서 resultType 으로 바뀜 
- 클래스명 전체 또는 alias를 입력 > 즉 매핑하려는 자바 클래스의 전체 경로를 입력함 (클래스-정의해둔 vo-를 갖고 온다 생각하면됨)
- 예 : com.test.Student 객체로 쿼리 실행 결과값을 받고자 할 때        
<select id="selectTest" resultType="com.test.Student">   
...  
</select> 
- 예 : int 형 객체로 쿼리 실행 결과값을 받을 때
<select id="selectTest" resultType="int">  
 ...  
</select>

resultMap 
- resultMap 선언 당시 참조로 사용한 이름을 입력 
- resultType을 이용하면 자동 매핑되기 때문에 편리하지만 제한이 있으나, resultMap을 사용하면 개발자가 직접 원하는 POJO 클래스에 매핑 가능 
- xml과 같은 문서 안에서 ㅐ롭게 정의된 형식. 
- 재사용성때문에 정의해서 쓰는것
- 기존 클래스에서 column의 이름이 다를 경우 쿼리와 맞춰주기 위해 column name의 치환 
- 예 :
<resultMap id="test" type="com.test.Student">            
<result property="name" column="name">             
....  
</resultMap>  
<select id="selectTest" resultMap="test">  
 ...  
</select>

참고하면 좋음 -> https://snepbnt.tistory.com/287 
- resultType에서 _를 자동생략되게끔 설정되어있는것같다는 추측이 있음 


mybatis
- #{} 
쿼리문 작성시 이걸 사용하면 PreparedStatement를 생성. 
위의 ?에 파라미터가 바인딩되어 수행됨. 
파싱된 쿼리문은 재활용되기 때문에 효율적임.
그리고 변수에 자동으로 작은 따옴표('')가 붙여서 쿼리 수행. 
때문에 '#{id}'같은 쿼리문을 직접 작성할 필요 없음. 
만약 테이블 설계가 user_1, user_2이렇게 분리되어있다면 이 #{}를 사용못함=> 사용시 SQLSyntaxErrorException 오류가 발생
-PreparedStatement 가 제공하는 set 계열의 메소드를 사용하여 물음표(?)를 대체할 값을 지정. 데이터 문자열로 인식하기 때문에 자동 따옴표가 붙음 = #{} (컴파일이 이미 되어있는 애임)

>mapper
select * from mineTest where num = #{num} and id = #{id}
>oracle
select * from mineTest where num = ? and id = ? 
이렇게 치환됨.
>실제 수행된 쿼리문
SELECT * FROM mineTest mtWHERE num = 34 AND id = 'mine'

- ${} 
-  ORDER BY 함수를 사용할 때 오히려 자동 따옴표가 붙으면 함수가 안먹기 때문에 ${}를 써야한다.
- 테이블 컬럼명임. 식별자 = ${} 
ex: select * from emp where (식별자컬럼명 ${}) like (컬럼값 #{}) 
값이 넣어진 채로 쿼리문 수행. 파라미터 값이 바뀔때마다 항상 쿼리문 파싱을 진행해야함.
Statement 방식. 새로운 쿼리로 인식함. 
쿼리문에 작은 따옴표('')가 붙지 않음. 그래서 테이블 이름이나 컬럼 이름을 동적으로 결정할때 사용 가능. (user_${id}) 이런게 가능. 
사용자입력을 받는 경우 이걸로 사용해주면 좋음 (사용자입력, 데이터가 많은 경우 주로 사용. 그게 아니면 대부분 #{}를 사용)

>mapperSELECT * FROM mineTest WHERE num = ${num} AND id = ${id}
>oracle로 전달SELECT * FROM mineTest WHERE num = 34 AND id = mine
>실제 수행 쿼리문SELECT * FROM mineTest mtWHERE num = 34 AND id = mine

참고 사이트 -> https://mine-it-record.tistory.com/300 

- '%키워드%'
연결연산자로 문자열을 엮어서 '%키워드%'로 만듦.

